{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/TodaysDate.js","components/TaskWidgets.js","App.js","serviceWorker.js","index.js"],"names":["Form","onNewTask","useState","inputText","setInputText","onSubmit","e","alert","preventDefault","text","completed","id","Math","random","className","value","onChange","target","type","placeholder","autofocus","Todo","todo","onEditTask","onDeleteTask","isEditing","setEditing","todoTitle","setTodoTitle","isOpen","openModal","modalTemplate","onClick","class","editingTemplate","console","log","htmlFor","viewTemplate","prevState","TodoList","filteredTodos","map","key","TodaysDate","dt","Date","toLocaleString","weekday","toUpperCase","getDate","month","getFullYear","TaskWidgets","todos","length","filter","App","setTodos","status","setFilteredTodos","useEffect","getFromLocal","filterHandler","saveToLocal","localStorage","setItem","JSON","stringify","getItem","todosFromLocal","parse","newTask","previous","deleteTask","editedTask","editTaskId","todoId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14113f95.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Form = ({ onNewTask }) => {\r\n   \r\n  const [inputText, setInputText] = useState('');\r\n  \r\n\r\n   const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const submitTodoHandler = (e) => {\r\n    if (inputText === '') {\r\n      alert('please enter a task');\r\n      e.preventDefault();\r\n    } else {\r\n      onNewTask(\r\n        \r\n        { text: inputText, completed: false, id: Math.random() * 1000 },\r\n      );\r\n      setInputText('');\r\n      \r\n    }\r\n  };\r\n\r\n  // const statusHandler = (e) => {\r\n  //   setStatus(e.target.value);\r\n  // };\r\n\r\n  return (\r\n    <form onSubmit={submitTodoHandler}>\r\n      <div className='input-bar'>\r\n        <input\r\n          value={inputText}\r\n          onChange={inputTextHandler}\r\n          type='text'\r\n          className='todo-input'\r\n          placeholder='Enter your task here...'\r\n          autofocus\r\n        />\r\n\r\n        <button className='todo-button' type='submit'>\r\n          <span className='fas fa-plus-square'></span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst Todo = ({ todo, onEditTask, onDeleteTask }) => {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [todoTitle, setTodoTitle] = useState(todo.text);\r\n  const [isOpen, openModal] = useState(false);\r\n\r\n  const togglePopup = () => {\r\n    openModal((prevState) => ({\r\n      isOpen: !prevState.isOpen,\r\n    }));\r\n  };\r\n\r\n  const modalTemplate = (\r\n    <div className='todo'>\r\n      <label className='todo-label'>Are you sure</label>\r\n      <div className='btn-group'>\r\n        <button\r\n          onClick={() => onDeleteTask(todo)}\r\n          className='confirm-delete-btn'\r\n        >\r\n          <i className='fas fa-check'></i>\r\n          <span className='visually-hidden'>{todoTitle}</span>\r\n        </button>\r\n        <button\r\n          type='button'\r\n          className='cancel-delete-btn'\r\n          onClick={() => openModal(false)}\r\n        >\r\n          <span className='visually-hidden'>{todoTitle}</span>\r\n          <i class='fas fa-window-close'></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const editingTemplate = (\r\n    <form\r\n      onSubmit={(e) => {\r\n        console.log('save');\r\n        e.preventDefault();\r\n        onEditTask({ ...todo, text: todoTitle });\r\n        setEditing(false);\r\n      }}\r\n      className='stack-small'\r\n    >\r\n      <div className='form-group'>\r\n        <label className='todo-label' htmlFor={todo.id}>\r\n          Edit Task\r\n        </label>\r\n        <input\r\n          onChange={(e) => setTodoTitle(e.target.value)}\r\n          id={todo.id}\r\n          className='todo-text'\r\n          type='text'\r\n          value={todoTitle}\r\n          autofocus\r\n        />\r\n      </div>\r\n      <div className='btn-group'>\r\n        <button\r\n          type='button'\r\n          className='todo-cancel'\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          <span className='visually-hidden'>{todoTitle}</span>\r\n          <i class='fas fa-window-close'></i>\r\n        </button>\r\n        <button type='submit' className='todo-edit'>\r\n          <span className='visually-hidden'>{todoTitle}</span>\r\n          <i class='fas fa-save'></i>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className='todo'>\r\n      <li className={`todo-item ${todo.completed ? 'completed-status' : ''}`}>\r\n        {todoTitle}\r\n      </li>\r\n\r\n      <button onClick={() => setEditing(true)} className='edit-btn'>\r\n        <i class='fas fa-edit'></i>\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => onEditTask({ ...todo, completed: !todo.completed })}\r\n        className='complete-btn'\r\n      >\r\n        <i className='fas fa-check'></i>\r\n      </button>\r\n\r\n      {/* <button onClick={() => onDeleteTask(todo)} className='trash-btn'> */}\r\n      <button onClick={togglePopup} className='trash-btn'>\r\n        <i className='fas fa-trash'></i>\r\n      </button>\r\n      \r\n    </div>\r\n    \r\n  );\r\n\r\n  return (\r\n    <li className='edit-todo'>\r\n      {isEditing ? editingTemplate : viewTemplate && isOpen ? modalTemplate : viewTemplate}\r\n      \r\n    </li>\r\n  );\r\n};\r\nexport default Todo;\r\n","import React from 'react';\r\n//import components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({\r\n  \r\n  \r\n  filteredTodos,\r\n  onEditTask,\r\n  onDeleteTask,\r\n}) => {\r\n  return (\r\n    <div className='todo-container'>\r\n      <div>\r\n        <h1>Todays Task</h1>\r\n      </div>\r\n      <ul className='todo-list'>\r\n        {filteredTodos.map((todo) => (\r\n          <Todo  key={todo.id} todo={todo} onEditTask={onEditTask} onDeleteTask={onDeleteTask}/>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\n\r\nconst TodaysDate = ()=>{\r\n    var dt = new Date();\r\n    return (\r\n      <div className='calendar-info'>\r\n        <div className='day'>\r\n          {dt.toLocaleString('en-us', { weekday: 'long' }).toUpperCase()}\r\n        </div>\r\n        <div className='date'>\r\n          {dt.getDate()}-\r\n          {dt.toLocaleString('en-us', { month: 'short' }).toUpperCase()}-\r\n          {dt.getFullYear()}\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TodaysDate;","import React from 'react';\r\nimport TodaysDate from './TodaysDate';\r\n\r\n\r\nconst TaskWidgets = ({todos}) => {\r\n  return (\r\n    <div className='widgets'>\r\n      <div className='total-widget'>\r\n        <p className='count'>{todos.length}</p>\r\n        <p className='tasks'>Total Tasks</p>\r\n      </div>\r\n      <div className='total-widget'>\r\n        <p className='count'>\r\n          {\r\n            todos.filter((todo) => {\r\n              return todo.completed;\r\n            }).length\r\n          }\r\n        </p>\r\n        <p className='tasks_done'>Completed</p>\r\n      </div>\r\n      <div className='total-widget'>\r\n        <p className='count'>\r\n          {\r\n            todos.filter((todo) => {\r\n              return !todo.completed;\r\n            }).length\r\n          }\r\n        </p>\r\n        <p className='remaining_tasks'>Remaining</p>\r\n      </div>\r\n      <TodaysDate />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskWidgets;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n//importing components\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\nimport TaskWidgets from './components/TaskWidgets';\nimport TodaysDate from './components/TodaysDate';\nimport TaskInfo from './components/TaskInfo';\n\nfunction App() {\n  //states\n  \n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  const [editTask, setEditTask] = useState('');\n\n  //to run only once the app starts\n  useEffect(() => {\n    getFromLocal();\n  }, []);\n  //use effect\n  useEffect(() => {\n    filterHandler();\n    saveToLocal();\n  }, [todos, status]);\n  //functions\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter((todo) => todo.completed === true));\n        break;\n      case 'pending':\n        setFilteredTodos(todos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  const onNewTask = (newTask) => {\n    setTodos((previous) => {\n      return [...previous, newTask];\n    });\n  };\n\n\n  const onDeleteTask = (deleteTask) =>{\n\n    setTodos((previous) => {\n      return previous.filter((todo)=>{\n        if(deleteTask.id === todo.id){\n          return false;\n        }else{\n          return true;\n        }\n      })\n    })\n  }\n\n  \n\n  const onEditTask = (editedTask) =>{\n\n    let editTaskId =  editedTask.id;\n\n    setTodos((previous) =>{\n      return previous.map((todo)=>{\n        let todoId = todo.id;\n        if(editTaskId === todoId){\n          return editedTask;\n\n        }else{\n          return todo;\n        }\n      })\n\n    })\n\n  }\n // [{id}{id}]\n\n\n  //save to local storage\n  const saveToLocal = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n  const getFromLocal = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todosFromLocal = JSON.parse(localStorage.getItem('todos'));\n      setTodos(todosFromLocal);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <div className='app-name'>\n        To-Do\n      </div>\n      \n\n      <Form onNewTask={onNewTask} />\n\n      \n\n      <TodoList\n        setTodos={setTodos}\n        onDeleteTask={onDeleteTask}\n        onEditTask={onEditTask}\n        filteredTodos={filteredTodos}\n      />\n      <div className='Footer'>\n        <h1>Overview</h1>\n      </div>\n\n      <TaskWidgets todos={todos} filteredTodos={filteredTodos} />\n\n      {/* <TaskInfo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}